name: Deploy to crates.io

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        target: ["x86_64-unknown-linux-gnu", "x86_64-unknown-linux-musl"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.toml') }}

      - name: Install packages (Ubuntu)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get -yy install musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Build secubot binary
        run: cargo build --release --locked --verbose

      - name: Rename binary to match target
        run: mv target/release/secubot target/release/secubot-${{ matrix.target }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: target/release/secubot-*

  publish:
    runs-on: ubuntu-latest
    needs: ['build']
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

    deploy:
      runs-on: ubuntu-latest
      needs: ['build']
      steps:
        - name: Configure SSH
          run: |
            mkdir -p ~/.ssh/
            echo "$SSH_KEY" > ~/.ssh/private.key
            chmod 600 ~/.ssh/private.key
            cat >>~/.ssh/config <<END
            Host aws
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/private.key
              StrictHostKeyChecking no
            END
          env:
            SSH_USER: ${{ secrets.AWS_USERNAME }}
            SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SSH_HOST: ${{ secrets.AWS_HOST }}

        - name: Update secubot on server
          run: ssh aws 'cd /opt/secubot && ./secupdate'
